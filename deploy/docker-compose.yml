version: '3.4'

services:
  api:
    container_name: api
    image: ${DOCKER_REGISTRY-}api
    build:
      context: ..
      dockerfile: src/Backend/Api/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_started
    networks:
      - app-network

  testingplatform.api:
    container_name: testingplatform.api
    image: ${DOCKER_REGISTRY-}api
    build:
      context: ..
      dockerfile: src/TestingPlatform/TestingPlatform.Api/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_started

  dc.bot:
    container_name: dc-bot
    image: ${DOCKER_REGISTRY-}dcbot
    build:
      context: ..
      dockerfile: src/Discord/DC.Bot/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_started
    restart: always
    environment:
        - ApiUrl=http://api
        # - BotSettings__Token=TOKEN
        - EvalApiUrl=http://eval-api
    networks:
      - app-network

  eval.api:
    container_name: eval-api    
    image: ${DOCKER_REGISTRY-}evalapi
    build:
      context: ..
      dockerfile: src/Eval/Eval.Api/Dockerfile
    restart: always
    networks:
      - app-network

  tg.bot:
    container_name: tg-bot
    image: ${DOCKER_REGISTRY-}tgbot
    build:
      context: ..
      dockerfile: src/Telegram/TG.Bot/Dockerfile
    restart: always
    networks:
      - app-network

  rabbitmq:
    container_name: rabbitmq
    image: "rabbitmq:3-management"
    hostname: "rabbitmq"
    environment:
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "rabbitmq"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - app-network

  node:
    build:
      context: ../src/vite-project
      dockerfile: Dockerfile
    image: my-front
    container_name: my-front
    ports:
      - "3000:3000"
    restart: unless-stopped
    working_dir: /app
    networks:
      - app-network 

networks:
  app-network:
    driver: bridge
